// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Protocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProtocolRoot

@implementation ProtocolRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ProtocolRoot_FileDescriptor

static GPBFileDescriptor *ProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ProtocolNodeAttribute

@implementation ProtocolNodeAttribute

@dynamic name;
@dynamic value;

typedef struct ProtocolNodeAttribute__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *value;
} ProtocolNodeAttribute__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolNodeAttribute_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProtocolNodeAttribute__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolNodeAttribute_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProtocolNodeAttribute__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProtocolNodeAttribute class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProtocolNodeAttribute__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProtocolNodeMap

@implementation ProtocolNodeMap

@dynamic name;
@dynamic nodeArray, nodeArray_Count;

typedef struct ProtocolNodeMap__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *nodeArray;
} ProtocolNodeMap__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolNodeMap_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProtocolNodeMap__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nodeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ProtocolNode),
        .number = ProtocolNodeMap_FieldNumber_NodeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProtocolNodeMap__storage_, nodeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProtocolNodeMap class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProtocolNodeMap__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001D\000\002\000Node\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProtocolNode

@implementation ProtocolNode

@dynamic isCdata;
@dynamic name;
@dynamic value;
@dynamic attrArray, attrArray_Count;
@dynamic nodeArray, nodeArray_Count;

typedef struct ProtocolNode__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *value;
  NSMutableArray *attrArray;
  NSMutableArray *nodeArray;
} ProtocolNode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isCdata",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolNode_FieldNumber_IsCdata,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolNode_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProtocolNode__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolNode_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProtocolNode__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attrArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ProtocolNodeAttribute),
        .number = ProtocolNode_FieldNumber_AttrArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProtocolNode__storage_, attrArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nodeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ProtocolNodeMap),
        .number = ProtocolNode_FieldNumber_NodeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProtocolNode__storage_, nodeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProtocolNode class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProtocolNode__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001CD\000\002D\000\003E\000\004\000Attr\000\005\000Node\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Protocol_Class

@implementation Protocol_Class

@dynamic id_p;
@dynamic sn;
@dynamic gwId;
@dynamic errCode;
@dynamic nodeArray, nodeArray_Count;

typedef struct Protocol_Class__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t sn;
  int32_t errCode;
  NSString *gwId;
  NSMutableArray *nodeArray;
} Protocol_Class__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Protocol_Class_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Protocol_Class__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sn",
        .dataTypeSpecific.className = NULL,
        .number = Protocol_Class_FieldNumber_Sn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Protocol_Class__storage_, sn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gwId",
        .dataTypeSpecific.className = NULL,
        .number = Protocol_Class_FieldNumber_GwId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Protocol_Class__storage_, gwId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = Protocol_Class_FieldNumber_ErrCode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Protocol_Class__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "nodeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ProtocolNodeMap),
        .number = Protocol_Class_FieldNumber_NodeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Protocol_Class__storage_, nodeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Protocol_Class class]
                                     rootClass:[ProtocolRoot class]
                                          file:ProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Protocol_Class__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\000ID\000\002b\000\003CA\000\004G\000\005\000Node\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupMessageClassNameSuffix:@"_Class"];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
